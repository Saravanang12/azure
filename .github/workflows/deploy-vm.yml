name: Deploy to Azure

on:
  push:
    branches:
      - master

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6  # Ensure this matches your Terraform version

      - name: Initialize Terraform
        run: |
          terraform init \
            -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="use_azuread_auth=true" \
            -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -lock-timeout=300s
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Validate Terraform Configuration
        run: |
          if ! terraform validate; then
            echo "Terraform validation failed. Exiting."
            exit 1
          fi

      - name: Check & Force Unlock Terraform State (if locked)
        run: |
          STATE_JSON=$(terraform state pull 2>/dev/null || echo '{}')
          LOCK_ID=$(echo "$STATE_JSON" | jq -r '.lock.id // empty')

          if [ -n "$LOCK_ID" ]; then
            echo "Terraform state is locked with ID: $LOCK_ID"
            echo "Attempting to unlock..."
            if terraform force-unlock -force "$LOCK_ID"; then
              echo "Lock released successfully!"
            else
              echo "Failed to unlock state. Proceeding with caution."
            fi
          else
            echo "No active Terraform lock detected."
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Plan (with Retry for Lock Handling)
        run: |
          n=0
          until [ "$n" -ge 5 ]; do
            # Ensure valid JSON before extracting LOCK_ID
            STATE_JSON=$(terraform state pull 2>/dev/null || echo '{}')
            LOCK_ID=$(echo "$STATE_JSON" | jq -r '.lock.id // empty')

            if [ -n "$LOCK_ID" ]; then
              echo "Terraform state is locked. Attempting to unlock..."
              terraform force-unlock -force "$LOCK_ID" && echo "Lock released successfully!" || echo "Failed to unlock state."
            fi

            if terraform plan -out=tfplan -lock-timeout=60s; then
              echo "Terraform plan executed successfully."
              break
            else
              echo "Terraform plan failed due to state lock or another issue. Retrying in 15 seconds..."
              sleep 15
              n=$((n+1))
            fi
          done

          if [ "$n" -ge 5 ]; then
            echo "Failed to acquire Terraform state lock after multiple retries. Exiting."
            exit 1
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply (Only if changes detected)
        run: |
          if terraform show -json tfplan | jq -e '.resource_changes | length > 0' >/dev/null; then
            echo "Changes detected. Applying Terraform plan..."
            terraform apply -auto-approve tfplan
          else
            echo "No changes detected. Skipping apply."
          fi
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
